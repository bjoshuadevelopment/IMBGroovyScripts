import java.util.*;
import org.openmrs.*;
import org.openmrs.api.*;
import org.openmrs.api.context.Context;

String patientUuid = null;

def sql(s) { admin.executeSQL(s,false) }

if(patientUuid != null){



/*this is for production server*/

    /*

    int PP=0;
    pprs = sql("""SELECT uuid from patient_program WHERE patient_id in (SELECT person_id FROM person WHERE uuid="${patientUuid}");""")
    pprs.each { row -> (uuid) = row

        PP++;
    }
    println "Number of programs patient enrolled in : ${PP}";


    countRecordsToChange = sql("""SELECT COUNT(record_id) FROM sync_server_record where record_id in  (select record_id from sync_record where payload like  "%${patientUuid}%" AND state !='COMMITTED')""");
    println "Number of non committed record: ${countRecordsToChange}";

    countCurrentlyNotsupposedtosync = sql("""SELECT  COUNT(record_id) FROM sync_server_record where state =  'NOT_SUPPOSED_TO_SYNC' and record_id in  (select record_id from  sync_record where payload like  "%${patientUuid}%" AND state !='COMMITTED')""");
    println "Current not supposed to sync : ${countCurrentlyNotsupposedtosync}";

    updateSSRrs = sql("""update sync_server_record set state = 'NOT_SUPPOSED_TO_SYNC' where record_id in (select record_id from sync_record where payload like "%${patientUuid}%" AND state !="COMMITTED")""");

    countTTNotsupposedtosync = sql("""SELECT COUNT(record_id) FROM sync_server_record where state = 'NOT_SUPPOSED_TO_SYNC' and record_id in  (select record_id from sync_record where payload like  "%${patientUuid}%" AND state !='COMMITTED')""");
    println "total Not supposed to sync records after update: ${countTTNotsupposedtosync}";

    changedRecords = countTTNotsupposedtosync - countCurrentlyNotsupposedtosync;
    println "Number of changed records : ${changedRecords}";


    println "End";


*/

/*this is for child server*/

/*
int PP = 0;
pprs = sql("""SELECT uuid from patient_program WHERE patient_id in (SELECT person_id FROM person WHERE uuid="${patientUuid}");""")
pprs.each { row -> (uuid) = row

  PP++;
}
println "Number of programs patient enrolled in : ${PP}";

countSRrs = sql("""SELECT COUNT(record_id) FROM sync_record where payload like "%${patientUuid}%" AND state !='COMMITTED'""");
println "Number of non committed records : ${countSRrs}";

countCurrentlyNotsupposedtosync =  sql("""SELECT COUNT(record_id) FROM sync_record where state = 'NOT_SUPPOSED_TO_SYNC' and payload like "%${patientUuid}%" AND state !='COMMITTED'""");
println "Current not supposed to sync : ${countCurrentlyNotsupposedtosync}";

updateSRrs  = sql("""update sync_record set state = 'NOT_SUPPOSED_TO_SYNC' where  payload like "%${patientUuid}%" AND state !='COMMITTED'""");

countTTNotsupposedtosync = sql("""SELECT COUNT(record_id) FROM sync_record where state = 'NOT_SUPPOSED_TO_SYNC' and payload like "%${patientUuid}%" AND state !='COMMITTED'""");
println "total Not supposed to sync records after update: ${countTTNotsupposedtosync}";
countTTNotsupposedtosync
changedRecords = (countTTNotsupposedtosync - countCurrentlyNotsupposedtosync);
println "Number of changed records : ${changedRecords[][]}";

println "End";
*/






    Date now = new Date();

    if (patientUuid != null) {
        p = patient.getPatientByUuid(patientUuid);
        p.setDateChanged(now);

        for (pn in p.names) {
            pn.setDateChanged(now);
        }

        for (pa in p.addresses) {
            pa.setDateChanged(now);
        }

        for (pa in p.attributes) {
            pa.setDateChanged(now);
        }

        for (pi in p.identifiers) {
            pi.setDateChanged(now);
        }

        patient.savePatient(p);
        println "Saved Patient " + p;

        for (r in person.getRelationshipsByPerson(p)) {
            r.setDateChanged(now);
            person.saveRelationship(r);
            println "Saved relationship " + r;
        }

        for (e in encounter.getEncountersByPatient(p)) {
            e.setDateChanged(now);
            if (e.visit != null) {
                e.visit.setDateChanged(now);
            }
            for (o in e.orders) {
                o.setDateChanged(now);
            }
            for (o in e.obs) {
                o.setDateChanged(now);
            }

            for (ep in e.encounterProviders) {
                ep.setDateChanged(now);
                if (ep.encounterRole != null) {
                    ep.encounterRole.setDateChanged(now);
                }
            }
            encounter.saveEncounter(e);
            println "Saved encounter " + e;
        }

        visitService = Context.getService(VisitService.class);
        for (v in visitService.getVisitsByPatient(p)) {
            v.setDateChanged(now);
            visitService.saveVisit(v);
            println "Saved visit " + v;
        }

        for (o in order.getDrugOrdersByPatient(p, OrderService.ORDER_STATUS.ANY, true)) {
            Date dateCreated = o.getDateCreated();
            Calendar cal = Calendar.getInstance();
            cal.setTime(dateCreated);
            cal.add(Calendar.SECOND, 1);
            o.setDateCreated(cal.getTime());
            order.saveOrder(o);
            println "Saved drug order " + o;
        }

        for (o in obs.getObservationsByPerson(p)) {
            if (o.encounter == null) {
                Date dateCreated = o.getDateCreated();
                Calendar cal = Calendar.getInstance();
                cal.setTime(dateCreated);
                cal.add(Calendar.SECOND, 1);
                o.setDateCreated(cal.getTime());
                obs.saveObs(o, 'Resaving patient and all data for sync');
                println "Saved obs " + o;
            }
        }

        for (pp in program.getPatientPrograms(p, null, null, null, null, null, true)) {
            pp.setDateChanged(now);
            for (ps in pp.states) {
                ps.setDateChanged(now);
            }
            program.savePatientProgram(pp);
            println "Saved patient program " + pp.id;
        }
    }
}
else {
    println "You need to enter a patientUuid at the top of the script to use it"
}